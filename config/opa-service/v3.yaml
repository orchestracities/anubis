static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 8000
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: upstream
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: upstream-service
          http_filters:
          - name: envoy.filters.http.ext_authz
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
              grpc_service:
                envoy_grpc:
                  cluster_name: ext_authz-opa-service
                timeout: 0.250s
              transport_api_version: V3
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inline_code: |
                function envoy_on_request(request_handle)
                  decodejwt = (loadfile "/etc/envoy-config/opa-service/lua/decodejwt.lua")()
                  JSON = (loadfile "/etc/envoy-config/opa-service/lua/JSON.lua")()
                  chunks = {}
                  raw_auth_header = request_handle:headers():get("authorization")
                  for substring in raw_auth_header:gmatch("%S+") do
                     table.insert(chunks, substring)
                  end
                  token = decodejwt:decode_jwt(chunks[2])
                  content_type = request_handle:headers():get("content-type")
                  if content_type == "application/json" then
                    local body = request_handle:body()
                    local body_size = body:length()
                    local body_bytes = body:getBytes(0, body_size)
                    local raw_json_text = tostring(body_bytes)
                    lua_value = JSON:decode(raw_json_text)
                    access_to = lua_value.id
                  end
                  request_handle:streamInfo():dynamicMetadata():set("envoy.filters.http.lua", "request.info", {
                    request_method = request_handle:headers():get(":method"),
                    request_path = request_handle:headers():get(":path"),
                    fiwareservice = request_handle:headers():get("fiware-service"),
                    fiwareservicepath = request_handle:headers():get("fiware-servicepath"),
                    authority = request_handle:headers():get(":authority"),
                    userid = token.claims.email,
                    access_to = access_to
                  })
                end
                function envoy_on_response(response_handle)
                  local meta = response_handle:streamInfo():dynamicMetadata():get("envoy.filters.http.lua")["request.info"]
                  if (meta.request_method == "POST" and meta.request_path == "/v2/entities" and meta.access_to and response_handle:headers():get(":status") == "201") then
                    local headers, body = response_handle:httpCall(
                    "policyapi-service",
                    {
                      [":method"] = "POST",
                      [":path"] = "/v1/policies/",
                      [":authority"] = meta.authority,
                      ["Content-Type"] = "application/json",
                      ["fiware_service"] = meta.fiwareservice,
                      ["fiware_service_path"] = meta.fiwareservicepath,
                    },
                    '{"access_to": "'..meta.access_to..'", "resource_type": "entity", "mode": ["acl:Control"], "agent": ["acl:agent:'..meta.userid..'"]}',
                    5000,
                    false)
                  end
                end
          - name: envoy.filters.http.router
            typed_config: {}
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 8090
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: policyapi
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: policyapi-service
          http_filters:
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inline_code: |
                function envoy_on_request(request_handle)
                  request_handle:headers():add("fiware_service", request_handle:headers():get("fiware-Service"))
                  request_handle:headers():add("fiware_service_path", request_handle:headers():get("fiware-Servicepath"))
                end
          - name: envoy.filters.http.ext_authz
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
              grpc_service:
                envoy_grpc:
                  cluster_name: ext_authz-opa-service
                timeout: 0.250s
              transport_api_version: V3
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inline_code: |
                function envoy_on_request(request_handle)
                  decodejwt = (loadfile "/etc/envoy-config/opa-service/lua/decodejwt.lua")()
                  chunks = {}
                  raw_auth_header = request_handle:headers():get("authorization")
                  for substring in raw_auth_header:gmatch("%S+") do
                     table.insert(chunks, substring)
                  end
                  token = decodejwt:decode_jwt(chunks[2])
                  request_handle:streamInfo():dynamicMetadata():set("envoy.filters.http.lua", "request.info", {
                    request_method = request_handle:headers():get(":method"),
                    request_path = request_handle:headers():get(":path"),
                    fiwareservice = request_handle:headers():get("fiware-service"),
                    fiwareservicepath = request_handle:headers():get("fiware-servicepath"),
                    authority = request_handle:headers():get(":authority"),
                    userid = token.claims.email
                  })
                end
                function envoy_on_response(response_handle)
                  local meta = response_handle:streamInfo():dynamicMetadata():get("envoy.filters.http.lua")["request.info"]
                  if (meta.request_method == "POST" and meta.request_path == "/v1/policies/" and response_handle:headers():get(":status") == "201") then
                    local headers, body = response_handle:httpCall(
                    "policyapi-service",
                    {
                      [":method"] = "POST",
                      [":path"] = "/v1/policies/",
                      [":authority"] = meta.authority,
                      ["Content-Type"] = "application/json",
                      ["fiware_service"] = meta.fiwareservice,
                      ["fiware_service_path"] = meta.fiwareservicepath,
                    },
                    '{"access_to": "'..response_handle:headers():get("policy-id")..'", "resource_type": "policy", "mode": ["acl:Control"], "agent": ["acl:agent:'..meta.userid..'"]}',
                    5000,
                    false)
                  end
                end
          - name: envoy.filters.http.router
            typed_config: {}
  clusters:
  - name: upstream-service
    connect_timeout: 0.250s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: upstream-service
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: upstream-service
                port_value: 1026

  - name: policyapi-service
    connect_timeout: 0.250s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: policyapi-service
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: policy-api
                port_value: 8000

  - name: ext_authz-opa-service
    connect_timeout: 0.250s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    http2_protocol_options: {}
    load_assignment:
      cluster_name: ext_authz-opa-service
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: ext_authz-opa-service
                port_value: 9002
