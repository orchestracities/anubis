{
  "openapi": "3.0.2",
  "info": {
    "title": "Anubis",
    "description": "Anubis is a flexible Policy Enforcement solution that makes easier to reuse security policies across different services, assuming the policies entail the same resource.",
    "version": "0.3.0"
  },
  "paths": {
    "/v1/tenants/service_paths": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "List all Service Paths",
        "operationId": "read_service_paths_v1_tenants_service_paths_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Skip",
              "type": "integer",
              "default": 0
            },
            "name": "skip",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Service Paths V1 Tenants Service Paths Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServicePath"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tenants/": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "List all Tenants",
        "operationId": "read_tenants_v1_tenants__get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Skip",
              "type": "integer",
              "default": 0
            },
            "name": "skip",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Tenants V1 Tenants  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tenant"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "services"
        ],
        "summary": "Create a new Tenant",
        "operationId": "create_tenant_v1_tenants__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tenants/{tenant_id}": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "Get a Tenant",
        "operationId": "read_tenant_v1_tenants__tenant_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Id",
              "type": "string"
            },
            "name": "tenant_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "services"
        ],
        "summary": "Delete a Tenant",
        "operationId": "delete_service_v1_tenants__tenant_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Id",
              "type": "string"
            },
            "name": "tenant_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tenants/{tenant_id}/service_paths": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "List Service Paths inside a Tenant",
        "operationId": "read_tenant_service_paths_v1_tenants__tenant_id__service_paths_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Id",
              "type": "string"
            },
            "name": "tenant_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Name",
              "type": "string"
            },
            "name": "name",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Skip",
              "type": "integer",
              "default": 0
            },
            "name": "skip",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Tenant Service Paths V1 Tenants  Tenant Id  Service Paths Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServicePath"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "services"
        ],
        "summary": "Create a new Service Path inside a Tenant",
        "operationId": "create_service_path_v1_tenants__tenant_id__service_paths_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Id",
              "type": "string"
            },
            "name": "tenant_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServicePathCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tenants/{tenant_id}/service_paths/{service_path_id}": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "Get a Service Path inside a Tenant",
        "operationId": "read_service_path_v1_tenants__tenant_id__service_paths__service_path_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Id",
              "type": "string"
            },
            "name": "tenant_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Service Path Id",
              "type": "string"
            },
            "name": "service_path_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePath"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "services"
        ],
        "summary": "Delete a Service Path inside a Tenant",
        "operationId": "delete_service_path_v1_tenants__tenant_id__service_paths__service_path_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Tenant Id",
              "type": "string"
            },
            "name": "tenant_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Service Path Id",
              "type": "string"
            },
            "name": "service_path_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/policies/access-modes": {
      "get": {
        "tags": [
          "policies"
        ],
        "summary": "List supported Access Modes",
        "operationId": "read_modes_v1_policies_access_modes_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Skip",
              "type": "integer",
              "default": 0
            },
            "name": "skip",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Modes V1 Policies Access Modes Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Mode"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/policies/agent-types": {
      "get": {
        "tags": [
          "policies"
        ],
        "summary": "List supported Agent Types",
        "operationId": "read_modes_v1_policies_agent_types_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Skip",
              "type": "integer",
              "default": 0
            },
            "name": "skip",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Modes V1 Policies Agent Types Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgentType"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/policies/": {
      "get": {
        "tags": [
          "policies"
        ],
        "summary": "List policies for a given Tenant and Service Path",
        "description": "Policies can be filtered by:\n  - Access Mode\n  - Agent\n  - Agent Type\n  - Resource\n  - Resource Type\nIn case an JWT token is passed over, user id, roles and groups are used to\nfilter policies that are only valid for him.\nTo return policies from a service path tree, you can used the wildchar \"#\".\nFor example, using `/Path1/#` you will obtain policies for all subpaths,\nsuch as: `/Path1/SubPath1` or `/Path1/SubPath1/SubSubPath1`.",
        "operationId": "read_policies_v1_policies__get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Mode",
              "type": "string"
            },
            "name": "mode",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Agent",
              "type": "string"
            },
            "name": "agent",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource",
              "type": "string"
            },
            "name": "resource",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Resource Type",
              "type": "string"
            },
            "name": "resource_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Agent Type",
              "type": "string"
            },
            "name": "agent_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Skip",
              "type": "integer",
              "default": 0
            },
            "name": "skip",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Authorization",
              "type": "string"
            },
            "name": "authorization",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "Fiware-Service",
              "type": "string"
            },
            "name": "fiware-service",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "Fiware-Servicepath",
              "type": "string",
              "default": "/#"
            },
            "name": "fiware-servicepath",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "Accept",
              "type": "string",
              "default": "application/json"
            },
            "name": "accept",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Read Policies V1 Policies  Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Policy"
                  }
                }
              },
              "text/turtle": {
                "schema": {
                  "type": "string"
                },
                "example": [
                  "@prefix acl: <http://www.w3.org/ns/auth/acl#> .\n\n<http:/www.w3.org/ns/auth/0723f0fd-785d-4091-bcc7-964361602421> acl:accessTo </v2/entities/urn:pippo> ;\n    acl:agentClass <acl:AuthenticatedAgent> ;\n    acl:mode <acl:Read>,\n        <acl:Write> .\n\n<http:/www.w3.org/ns/auth/16bdc820-4177-4403-a3e5-7c12abb57751> acl:accessTo </v2/entities/> ;\n    acl:agentClass <acl:AuthenticatedAgent> ;\n    acl:mode <acl:Read> ."
                ]
              },
              "text/rego": {
                "schema": {
                  "type": "string"
                },
                "example": [
                  "package enyoy.authz.4385a69f-6d3d-49ed-b342-848f30297a05\n                    'tenant = \"EKZ\"\n                    {...}\n                    resource_allowed {\n                        fiware_service = tenant\n                        is_token_valid\n                        glob.match(\"/v2/entities/\", [\"/\"], path)\n                        contains_element(scope_method[\"acl:Read\"], method)\n                        glob.match(\"/\", [\"/\"], fiware_servicepath)\n                    }"
                ]
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "policies"
        ],
        "summary": "Create a policy for a given Tenant and Service Path",
        "operationId": "create_policy_v1_policies__post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Fiware-Service",
              "type": "string"
            },
            "name": "fiware-service",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "Fiware-Servicepath",
              "type": "string",
              "default": "/"
            },
            "name": "fiware-servicepath",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/policies/{policy_id}": {
      "get": {
        "tags": [
          "policies"
        ],
        "summary": "Get a policy",
        "operationId": "read_policy_v1_policies__policy_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Id",
              "type": "string"
            },
            "name": "policy_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Skip",
              "type": "integer",
              "default": 0
            },
            "name": "skip",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "type": "integer",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Fiware-Service",
              "type": "string"
            },
            "name": "fiware-service",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "Fiware-Servicepath",
              "type": "string",
              "default": "/#"
            },
            "name": "fiware-servicepath",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "Accept",
              "type": "string"
            },
            "name": "accept",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              },
              "text/turtle": {
                "schema": {
                  "type": "string"
                },
                "example": [
                  "@prefix acl: <http://www.w3.org/ns/auth/acl#> .\n\n<http:/www.w3.org/ns/auth/0723f0fd-785d-4091-bcc7-964361602421> acl:accessTo </v2/entities/urn:pippo> ;\n    acl:agentClass <acl:AuthenticatedAgent> ;\n    acl:mode <acl:Read>,\n        <acl:Write> .\n\n<http:/www.w3.org/ns/auth/16bdc820-4177-4403-a3e5-7c12abb57751> acl:accessTo </v2/entities/> ;\n    acl:agentClass <acl:AuthenticatedAgent> ;\n    acl:mode <acl:Read> ."
                ]
              },
              "text/rego": {
                "schema": {
                  "type": "string"
                },
                "example": [
                  "package enyoy.authz.4385a69f-6d3d-49ed-b342-848f30297a05\n                    'tenant = \"EKZ\"\n                    {...}\n                    resource_allowed {\n                        fiware_service = tenant\n                        is_token_valid\n                        glob.match(\"/v2/entities/\", [\"/\"], path)\n                        contains_element(scope_method[\"acl:Read\"], method)\n                        glob.match(\"/\", [\"/\"], fiware_servicepath)\n                    }"
                ]
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "policies"
        ],
        "summary": "Update a policy for a given Tenant and Service Path",
        "operationId": "update_v1_policies__policy_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Id",
              "type": "string"
            },
            "name": "policy_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Fiware-Service",
              "type": "string"
            },
            "name": "fiware-service",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "Fiware-Servicepath",
              "type": "string",
              "default": "/"
            },
            "name": "fiware-servicepath",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "policies"
        ],
        "summary": "Delete a policy for a given Tenant and Service Path",
        "operationId": "delete_policy_v1_policies__policy_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Policy Id",
              "type": "string"
            },
            "name": "policy_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Fiware-Service",
              "type": "string"
            },
            "name": "fiware-service",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "Fiware-Servicepath",
              "type": "string"
            },
            "name": "fiware-servicepath",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/": {
      "get": {
        "summary": "Return Anubis API endpoints",
        "operationId": "v1_root_v1__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/version/": {
      "get": {
        "summary": "Return the version of the Anubis API",
        "operationId": "v1_version_version__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "summary": "Simple healthcheck endpoint",
        "operationId": "pong_ping_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AgentType": {
        "title": "AgentType",
        "required": [
          "iri",
          "name"
        ],
        "type": "object",
        "properties": {
          "iri": {
            "title": "Iri",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "Mode": {
        "title": "Mode",
        "required": [
          "iri",
          "name"
        ],
        "type": "object",
        "properties": {
          "iri": {
            "title": "Iri",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          }
        }
      },
      "Policy": {
        "title": "Policy",
        "required": [
          "access_to",
          "resource_type",
          "id"
        ],
        "type": "object",
        "properties": {
          "access_to": {
            "title": "Access To",
            "type": "string"
          },
          "resource_type": {
            "title": "Resource Type",
            "type": "string"
          },
          "mode": {
            "title": "Mode",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "agent": {
            "title": "Agent",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "id": {
            "title": "Id",
            "type": "string"
          }
        }
      },
      "PolicyCreate": {
        "title": "PolicyCreate",
        "required": [
          "access_to",
          "resource_type"
        ],
        "type": "object",
        "properties": {
          "access_to": {
            "title": "Access To",
            "type": "string"
          },
          "resource_type": {
            "title": "Resource Type",
            "type": "string"
          },
          "mode": {
            "title": "Mode",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "agent": {
            "title": "Agent",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          }
        }
      },
      "ServicePath": {
        "title": "ServicePath",
        "required": [
          "path",
          "id",
          "tenant_id"
        ],
        "type": "object",
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "tenant_id": {
            "title": "Tenant Id",
            "type": "string"
          },
          "parent_id": {
            "title": "Parent Id",
            "type": "string"
          },
          "scope": {
            "title": "Scope",
            "type": "string"
          },
          "children": {
            "title": "Children",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServicePath"
            },
            "default": []
          }
        }
      },
      "ServicePathCreate": {
        "title": "ServicePathCreate",
        "required": [
          "path"
        ],
        "type": "object",
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        }
      },
      "Tenant": {
        "title": "Tenant",
        "required": [
          "name",
          "id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "service_paths": {
            "title": "Service Paths",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServicePath"
            },
            "default": []
          }
        }
      },
      "TenantCreate": {
        "title": "TenantCreate",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "services",
      "description": "Manage Tenants and Service Paths"
    },
    {
      "name": "policies",
      "description": "Manage Policies for each Tenant and Service Path within a Tenant."
    }
  ]
}
